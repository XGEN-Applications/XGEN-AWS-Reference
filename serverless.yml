# Welcome to Serverless!
# For full config options, check the docs:
#    docs.serverless.com


service: api

# environment setup
# cloud provider name
# runtime: nodejs version 8.10 (latest version)
provider:
  name: aws
  runtime: nodejs8.10

# you can overwrite defaults here
# stage dev as default but can be overriden with sls deploy --stage [stage name]
stage: dev
region: us-east-1

# serverless framework plugins
# offline plugin is for local test
plugins:
  - serverless-offline

# lambda functions

functions:

  # register user
  register:
    handler: api/user/register.handler
    events:
     - http:
        path: users/register
        method: post
        cors: true
        integration: lambda

  # login user, return token
  login:
    handler: api/user/login.handler
    events:
     - http:
        path: users/login
        method: post
        cors: true
        integration: lambda

  # logout user - terminate server session
  logout:
    handler: api/user/logout.handler
    events:
     - http:
        path: users/logout
        method: post
        cors: true
        integration: lambda        

  # private lambda authorizer function, not published on API gateway
  authorizer:
    handler: helpers/authorizer.handler

  # get currenly logged in user
  current:
    handler: api/user/current.handler
    events:
     - http:
        path: users/current
        method: get
        authorizer: authorizer
        cors: true
        integration: lambda        

  # route to get single project
  # id is a path param
  # get single project using CALL usp_Projects_Get() stored procedure
  get-project:
    handler: api/project/get.handler
    events:
     - http:
        path: projects/{id}
        request:
          parameters:
            paths:
              id: true
        method: get
        authorizer: authorizer
        cors: true
        integration: lambda  

  # route to get all projects
  # shares the same handler with single project
  # if id is provided then single project will be returned
  # else all projects will be returned
  # get all projects using CALL usp_Projects_GetAll() stored procedure
  get-all-projects:
    handler: api/project/get.handler
    events:
     - http:
        path: projects
        method: get
        authorizer: authorizer
        cors: true
        integration: lambda  

  # add single project using CALL usp_Projects_Add() stored procedure
  add-project:
    handler: api/project/add.handler
    events:
     - http:
        path: projects
        method: post
        authorizer: authorizer
        cors: true
        integration: lambda  

  # update single project using CALL usp_Projects_Update() stored procedure    
  update-project:
    handler: api/project/update.handler
    events:
     - http:
        path: projects
        method: put
        authorizer: authorizer
        cors: true
        integration: lambda          

  # delete single project using CALL usp_Projects_Delete() stored procedure    
  # id is a path parameter that must be provided
  delete-project:
    handler: api/project/delete.handler
    events:
     - http:
        path: projects/{id}
        request:
          parameters:
            paths:
              id: true
        method: delete
        authorizer: authorizer
        cors: true
        integration: lambda  